# hz.db - Database EPICS Modbus HAZEMEYER Iocaste Power Supply
# This file contains the database records for the HAZEMEYER Iocaste Power Supply
# It includes the project code, customer number, and various control and status registers.

# Direct Modbus addresses without substitutions


record(ai, "$(P)$(R)current_raw") {
    field(DESC, "Current Raw Value")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),0x0c,$(TIMEOUT))MODBUS_DATA")
    field(SCAN, "I/O Intr")
}


record(ai, "$(P)$(R)current") {
    field(DESC, "Current Value")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn($(PORT),0x0c,$(TIMEOUT))MODBUS_DATA")
    field(SCAN, "I/O Intr")
    field(ASLO, "0.00000000325962901") 
    field(AOFF, "0")
    field(PREC, "3")
    field(EGU, "V")
}


# record(bi, "$(P)$(R)bit0") {
#   field(DESC, "Bit 0 of 40001")
#   field(DTYP, "asynUInt32Digital")
#   field(INP, "@asyn($(PORT),16,$(TIMEOUT))UINT16")
#   field(SCAN, "I/O Intr")
# #   field(MASK, "0x0001")
# #   field(ZNAM, "0")
# #   field(ONAM, "1")
# }



# record(mbbiDirect, "$(P)$(R)bits1to3") {
#   field(DESC, "Bits 1â€‘3 of 40001")
#   field(DTYP, "asynUInt32Digital")
#   field(INP, "@asyn($(PORT),16,$(TIMEOUT))UINT16")
#   field(SCAN, "I/O Intr")
# #   field(NOBT, "3")
# #   field(SHFT, "1")
# }


# record(ai, "$(P)$(R)InterlockFault") {
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),16,$(TIMEOUT))UINT16")
#     field(SCAN, "1 second")
# }


# record(ai, "$(P)$(R)v2") {
#     field(DESC, "Current Raw Value (40013)")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),12,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "I/O Intr")
# }



# record(ai, "$(P)$(R)current") {
#     field(DESC, "Current in Amperes")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT),0,1000)MODBUS_DATA")
#     field(SCAN, "I/O Intr")
#     field(LINR, "LINEAR")
#     field(EGUF, "110.0")
#     field(EGUL, "0.0")
#     field(EGU,  "A")
#     field(PREC, "2")
#     field(HOPR, "110.0")
#     field(LOPR, "0.0")
#     field(HIHI, "105.0")
#     field(HIGH, "100.0")
#     field(HHSV, "MAJOR")
#     field(HSV,  "MINOR")
# }

# record(calc, "$(P)$(R)current_calc") {
#     field(DESC, "Current in Amperes")
#     field(CALC, "A*110/65535")
#     field(INPA, "$(P)$(R)current_raw")

# }
# record(ai, "$(P)$(R)IpAddr_High") {
#     field(DESC, "IP Address High (40045)")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT) 45 $(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "1 second")
# }

# record(ai, "$(P)$(R)IpAddr_Low") {
#     field(DESC, "IP Address Low (40046)")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT) 46 $(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "1 second")
# }

# record(ai, "$(P)$(R)Code") {
#     field(DESC, "Power Supply Code (40041)")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT),40,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "5 second")
# }

# record(ai, "$(P)$(R)Version1") {
#     field(DESC, "Power Supply Version (40042)")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT),41,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "2 second")
#     field(PREC, "0")
#     field(EGU,  "")
#     info(asyn:READBACK, "1")
# }

# record(ai, "$(P)$(R)Version2") {
#     field(DESC, "Power Supply Version (40043)")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT),42,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "2 second")
#     field(PREC, "0")
#     field(EGU,  "")
#     info(asyn:READBACK, "1")
# }

# record(ai, "$(P)$(R)TestValue") {
#     field(DESC, "Registro 40016")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT),15,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "2 second")
#     field(PREC, "0")
#     field(EGU,  "")
#     info(asyn:READBACK, "1")
# }

# record(stringin, "$(P)$(R)ProjectCode") {
#     field(DESC, "Project code (40037/40038)")
#     field(DTYP, "asynOctetRead")
#     field(INP, "@asyn($(PORT),36,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "10 second")
#     info(asyn:READBACK, "1")
# }

# record(ai, "$(P)$(R)FwVer") {
#     field(DESC, "Firmware ver MB441 motherboard")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT),21,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "I/O Intr")
#     # field(PREC, "5")
#     # field(EGU,  "")
#     # info(asyn:READBACK, "1")
# }

# record(ai, "$(P)$(R)ip") {
#     field(DESC, "Firmware ver MB441 motherboard")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT),2,$(TIMEOUT))INT32_LE")
#     field(SCAN, "I/O Intr")
#     # field(PREC, "5")
#     # field(EGU,  "")
#     # info(asyn:READBACK, "1")
# }


# record(ai, "$(P)$(R)cmd") {
#     field(DESC, "Test Command")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT) 0 $(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "I/O Intr")
#     # field(PREC, "5")
#     # field(EGU,  "")
#     # info(asyn:READBACK, "1")
# }

# record(ao, "$(P)$(R)current_sp") {
#     field(DESC, "Current Set Point")
#     field(DTYP, "asynFloat64")
#     field(OUT,  "@asyn($(PORT) 5 $(TIMEOUT))FLOAT32_LE")
#     field(SCAN, "I/O Intr")

# }

# record(ao, "$(P)$(R)voltage_sp") {
#     field(DESC, "Voltage Set Point")
#     field(DTYP, "asynFloat64")
#     field(OUT,  "@asyn($(PORT) 7 $(TIMEOUT))FLOAT32_LE")
#     field(SCAN, "I/O Intr")

# }

# record(ai, "$(P)$(R)current_rb") {
#     field(DESC, "Current Read")
#     field(DTYP, "asynFloat64")
#     field(INP,  "@asyn($(PORT) 9 $(TIMEOUT))FLOAT32_LE")
#     field(SCAN, "I/O Intr")

# }

# record(ai, "$(P)$(R)voltage_rb") {
#     field(DESC, "Voltage Read")
#     field(DTYP, "asynFloat64")
#     field(INP,  "@asyn($(PORT) 11 $(TIMEOUT))FLOAT32_LE")
#     field(SCAN, "I/O Intr")

# }
# # =============================================================================
# # PROJECT CODE (40037/40038) - 32-bit string, 2 registri
# # =============================================================================
# record(stringin, "$(P)$(R)ProjectCode") {
#     field(DESC, "Project reference code")
#     field(DTYP, "asynOctetRead")
#     field(INP,  "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "10 second")
#     info(asyn:READBACK, "1")
# }



# # =============================================================================
# # CUSTOMER NUMBER (40039/40040) - 32-bit integer, 2 registri
# # =============================================================================
# record(longin, "$(P)$(R)CustomerNumber") {
#     field(DESC, "Client reference number")
#     field(DTYP, "asynInt32")
#     field(INP,  "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "10 second")
#     info(asyn:READBACK, "1")
# }



######## old code, not used ########
# # hz.map - auto-generated from hz.db
# # This file is generated by the EPICS build system and should not be edited manually.
# # It contains the mapping of database records to Modbus addresses.





# # hz_map_generated.db - auto-generated from hz.map

# # =========================
# # Command Power suo. (0x0004)
# # =========================
# # record(bo, "$(P)$(R)power_off") {
# #     field(DESC, "Command Power Off")
# #     field(DTYP, "asynInt32")
# #     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
# #     field(ZNAM, "No")
# #     field(ONAM, "Power Off")
# # }

# # record(bo, "$(P)$(R)power_on") {
# #     field(DESC, "Command Power On")
# #     field(DTYP, "asynInt32")
# #     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
# #     field(ZNAM, "No")
# #     field(ONAM, "Power On")
# # }

# # record(bo, "$(P)$(R)reset") {
# #     field(DESC, "Command Reset")
# #     field(DTYP, "asynInt32")
# #     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
# #     field(ZNAM, "No")
# #     field(ONAM, "Reset")
# # }

# # record(bo, "$(P)$(R)rampstart") {
# #     field(DESC, "Command Rampstart")
# #     field(DTYP, "asynInt32")
# #     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
# #     field(ZNAM, "No")
# #     field(ONAM, "Rampstart")
# # }

# # record(bo, "$(P)$(R)global_off") {
# #     field(DESC, "Command Global Off")
# #     field(DTYP, "asynInt32")
# #     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
# #     field(ZNAM, "No")
# #     field(ONAM, "Global Off")
# # }

# # =========================
# # Channel Set current (0x0006)
# # =========================
# record(ao, "$(P)$(R)current") {
#     field(DESC, "Channel Set Current")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(WPORT),6,$(TIMEOUT))MODBUS_DATA")
#     field(LINR, "LINEAR")
#     field(ESLO, "1")
#     field(EGU, "mA")
#     field(PREC, "0")
#     field(DRVL, "0")
#     field(DRVH, "32767")
# }

# # =========================
# # Channel Set Stewrate (0x0007)
# # =========================
# record(ao, "$(P)$(R)slewrate") {
#     field(DESC, "Channel Set Stewrate")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(PORT),7,$(TIMEOUT))MODBUS_DATA")
#     field(LINR, "LINEAR")
#     field(ESLO, "1")
#     field(EGU, "")
#     field(PREC, "0")
#     field(DRVL, "0")
#     field(DRVH, "65535")
# }

# # =========================
# # Statuses Power sun. (0x000A)
# # =========================

# record(ai, "$(P)$(R)state_raw") {
#     field(DESC, "Output current readback")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "1 second")
# }



# record(bi, "$(P)$(R)state_power_on") {
#     field(DESC, "State Power On")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "Off")
#     field(ONAM, "On")
# }

# record(bi, "$(P)$(R)state_standby") {
#     field(DESC, "State Standby")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Standby")
# }

# record(bi, "$(P)$(R)state_ready") {
#     field(DESC, "State Ready")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Ready")
# }

# record(bi, "$(P)$(R)state_all_fault") {
#     field(DESC, "State All Fault")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "All Fault")
# }

# record(bi, "$(P)$(R)state_bnc_rampstart") {
#     field(DESC, "State BNC Rampstart")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "BNC Rampstart")
# }

# record(bi, "$(P)$(R)state_remote") {
#     field(DESC, "State Remote")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Remote")
# }

# record(bi, "$(P)$(R)state_busv") {
#     field(DESC, "State Busv")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Busv")
# }

# record(bi, "$(P)$(R)state_ramp_progress") {
#     field(DESC, "State Ramp Progress")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Ramp Progress")
# }

# # =========================
# # Output current readback (0x000B)
# # =========================
# record(ai, "$(P)$(R)current_raw_rb") {
#     field(DESC, "Output current readback")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),11,$(TIMEOUT))MODBUS_DATA")
#     field(SCAN, "1 second")
#     # field(LINR, "LINEAR")
#     # field(ESLO, "1")
#     # field(EGU, "mA")
#     # field(PREC, "0")
#     # field(LOPR, "0")
#     # field(HOPR, "32767")
# }

# # =========================
# # Output voltage readback (0x000C)
# # =========================
# record(ai, "$(P)$(R)voltage_rb") {
#     field(DESC, "Output voltage readback")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),12,$(TIMEOUT))MODBUS_DATA")
#     field(LINR, "LINEAR")
#     field(ESLO, "1")
#     field(EGU, "cV")
#     field(PREC, "0")
#     field(LOPR, "0")
#     field(HOPR, "32767")
# }

# # =========================
# # Output earth current readback (0x000D)
# # =========================
# record(ai, "$(P)$(R)earth_current_rb") {
#     field(DESC, "Output earth current readback")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),13,$(TIMEOUT))MODBUS_DATA")
#     field(LINR, "LINEAR")
#     field(ESLO, "1")
#     field(EGU, "mA")
#     field(PREC, "0")
#     field(LOPR, "0")
#     field(HOPR, "32767")
# }

# # =========================
# # Set current readback (0x000E)
# # =========================
# record(ai, "$(P)$(R)set_current_rb") {
#     field(DESC, "Set current readback")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),14,$(TIMEOUT))MODBUS_DATA")
#     field(LINR, "LINEAR")
#     field(ESLO, "1")
#     field(EGU, "mA")
#     field(PREC, "0")
#     field(LOPR, "0")
#     field(HOPR, "32767")
# }

# # =========================
# # Faults 1 Power suo. (0x000F)
# # =========================
# record(bi, "$(P)$(R)fault_user1") {
#     field(DESC, "Fault User 1")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),15,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "OK")
#     field(ONAM, "Fault")
# }
# # ...repeat for User2, User3, User4, User5, DC overcurrent, DCCT, Earth current, Ground fuse, AC overcurrent, Phase, Main contactor, Door...

# # =========================
# # Faults 2 Power suo. (0x0010)
# # =========================
# record(bi, "$(P)$(R)fault_residual_alarm") {
#     field(DESC, "Fault Residual alarm")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),16,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "OK")
#     field(ONAM, "Fault")
# }
# # ...repeat for Fuses capacitors, Low freq filter choke over-temp, High-freq transformer over-temp, High-freq filter choke over-temp 1, High-freq filter choke over-temp 2, Heatsink over-temp, Ambient over-temp...

# # =========================
# # Command Power suo. (all bits)
# # =========================
# # record(mbbo, "$(P)$(R)cmd") {
# #     field(DESC, "Command Power suo. (all bits)")
# #     field(DTYP, "asynInt32")
# #     field(OUT, "@asyn($(WPORT),4,$(TIMEOUT))MODBUS_DATA")
# #     field(NOBT, "16")
# #     field(ZRST, "Power Off")
# #     field(ONST, "Power On")
# #     field(TWST, "Not used")
# #     field(THST, "Reset")
# #     field(FRST, "Rampstart")
# #     field(FVST, "Global Off")
# # }

# # =========================
# # Command Power suo. (all bits)
# # =========================
# record(ao, "$(P)$(R)cmd") {
#     field(DESC, "Command Power suo. (all bits)")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(WPORT),4,$(TIMEOUT))MODBUS_DATA")
# }
