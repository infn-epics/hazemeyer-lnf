# hz_map_generated.db - auto-generated from hz.map

# =========================
# Command Power suo. (0x0004)
# =========================
# record(bo, "$(P):$(R):power_off") {
#     field(DESC, "Command Power Off")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Power Off")
# }

# record(bo, "$(P):$(R):power_on") {
#     field(DESC, "Command Power On")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Power On")
# }

# record(bo, "$(P):$(R):reset") {
#     field(DESC, "Command Reset")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Reset")
# }

# record(bo, "$(P):$(R):rampstart") {
#     field(DESC, "Command Rampstart")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Rampstart")
# }

# record(bo, "$(P):$(R):global_off") {
#     field(DESC, "Command Global Off")
#     field(DTYP, "asynInt32")
#     field(OUT, "@asyn($(PORT),4,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "No")
#     field(ONAM, "Global Off")
# }

# =========================
# Channel Set current (0x0006)
# =========================
record(ao, "$(P):$(R):CURRENT_SP") {
    field(DESC, "Channel Set Current")
    field(EGU, "A")
    field(PREC, "0")
    field(DRVL, "0")
    field(DRVH, "$(IMAX)")
    field(FLNK, "$(P):$(R):CALC_CURRENT_RAW")
}
record(calcout, "$(P):$(R):CALC_CURRENT_RAW") {
    field(DESC, "Channel Set Current")
    field(INPA, "$(P):$(R):set_current")
    field(CALC, "(A * 32767)/$(IMAX)")
    field(OUT,"$(P):$(R):RAW_CURRENT_SP")
    field(FLNK, "$(P):$(R):RAW_CURRENT_SP")
}


record(ao, "$(P):$(R):RAW_CURRENT_SP") {
    field(DESC, "Channel Set Current")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(WPORT),2,$(TIMEOUT))MODBUS_DATA")
    field(PREC, "0")
}


# =========================
# Channel Set Stewrate (0x0007)
# =========================
record(ao, "$(P):$(R):SLEWRATE_SP") {
    field(DESC, "Channel Set Stewrate")
    field(PREC, "0")
    field(DRVL, "0")
    field(DRVH, "$(IMAX)")
    field(FLNK, "$(P):$(R):CALC_SLEWRATE_RAW")
}

record(calcout, "$(P):$(R):CALC_SLEWRATE_RAW") {
    field(DESC, "Channel Set slewrate")
    field(INPA, "$(P):$(R):slewrate")
    field(CALC, "(A * 32767)/$(IMAX)")
    field(OUT,"$(P):$(R):RAW_SLEWRATE_SP")
    field(FLNK, "$(P):$(R):RAW_SLEWRATE_SP")
}


record(ao, "$(P):$(R):RAW_SLEWRATE_SP") {
    field(DESC, "Channel Set slewrate")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(WPORT),3,$(TIMEOUT))MODBUS_DATA")
    field(PREC, "0")
    
}


# =========================
# Statuses Power sun. (0x000A)
# =========================

record(ai, "$(P):$(R):RAW_STATE_RB") {
    field(DESC, "Raw State")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),6,$(TIMEOUT))MODBUS_DATA")
    field(SCAN, "1 second")
}



record(ai, "$(P):$(R):RAW_STATE2_RB") {
    field(DESC, "Raw State")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),11,$(TIMEOUT))MODBUS_DATA")
    field(SCAN, "1 second")
}


# =========================
# Output current readback (0x000B)
# =========================

record(ai, "$(P):$(R):IMAX") {
    field(DESC, "Max current")
    field(SCAN, "Passive")
    field(PINI,"YES")
    field(VAL,$(IMAX))
}
record(ai, "$(P):$(R):VMAX") {
    field(DESC, "Max voltage")
    field(SCAN, "Passive")
    field(PINI,"YES")
    field(VAL,$(VMAX))
}
record(ai, "$(P):$(R):RAW_CURRENT_RB") {
    field(DESC, "Output current readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),7,$(TIMEOUT))MODBUS_DATA")
    field(SCAN, "1 second")
}

record(calc, "$(P):$(R):CURRENT_RB")
{
    field(DESC, "current_rb")
    field(INPA, "$(P):$(R):RAW_CURRENT_RB")
    field(INPB, "$(P):$(R):IMAX")
    field(CALC, "(A / 32767) * B")
    field(PREC, "8")
    field(SCAN, "1 second")
}

# =========================
# FAULTS 1 POWER SUPPLY (0x000F)
# =========================



# =========================
# Output voltage readback (0x000C)
# =========================
record(ai, "$(P):$(R):RAW_VOLTAGE_RB") {
    field(DESC, "Output voltage readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),8,$(TIMEOUT))MODBUS_DATA")
    field(SCAN, "1 second")
}
record(calc, "$(P):$(R):VOLTAGE_RB")
{
    field(DESC, "voltage_rb")
    field(INPB, "$(P):$(R):RAW_VOLTAGE_RB")
    field(CALC, "(B / 32767) * $(VMAX)")
    field(PREC, "8")
    field(SCAN, "1 second")
}
# =========================
# Output earth current readback (0x000D)
# =========================
record(ai, "$(P):$(R):EARTH_CURRENT_RB") {
    field(DESC, "Output earth current readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),9,$(TIMEOUT))MODBUS_DATA")
    field(LINR, "LINEAR")
    field(ESLO, "1")
    field(EGU, "mA")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "32767")
}

# =========================
# Set current readback (0x000E)
# =========================
record(ai, "$(P):$(R):SET_CURRENT_RB") {
    field(DESC, "Set current readback")
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),10,$(TIMEOUT))MODBUS_DATA")
    field(LINR, "LINEAR")
    field(ESLO, "1")
    field(EGU, "mA")
    field(PREC, "0")
    field(LOPR, "0")
    field(HOPR, "32767")
}

# # =========================
# # Faults 2 Power suo. (0x0010)
# # =========================
# record(bi, "$(P):$(R):fault_residual_alarm") {
#     field(DESC, "Fault Residual alarm")
#     field(DTYP, "asynInt32")
#     field(INP, "@asyn($(PORT),16,$(TIMEOUT))MODBUS_DATA")
#     field(ZNAM, "OK")
#     field(ONAM, "Fault")
# }
# # ...repeat for Fuses capacitors, Low freq filter choke over-temp, High-freq transformer over-temp, High-freq filter choke over-temp 1, High-freq filter choke over-temp 2, Heatsink over-temp, Ambient over-temp...



# =========================
# Command Power suo. (all bits)
# =========================
record(ao, "$(P):$(R):STATE_SP") {
    field(DESC, "Command Power suo. (all bits)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(WPORT),0,$(TIMEOUT))MODBUS_DATA")
}
